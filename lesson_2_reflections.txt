What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository using the command
  git init
the hidden git folder for tracking changes (called .git) is created, but no commits exist yet.
To see this, run the command
  git status
It's important to initialize the repository so that changes can be tracked.


How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is an impermanent area between the working directory and the git repository. You add files here before you actually commit them to the git repo; if you accidentally add the wrong file, you can remove it. Once everything is squared away, then you can commit. It likely improves the quality/significance of each commit. 


How can you use the staging area to make sure you have one commit per logical change?
Once you've made a logical change, add the file(s) to the staging area (using git add (filename(s)).
Then run
  git diff --staged
to compare the files in the staging area to the last commit in the repo to make sure you want to commit the changes. 
Also, if there a multiple files you've edited, maybe each one alone is a logical change, so add each file to the staging area and then commit.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful if you want to develop the current state of the project in multiple directions, possibly creating multiple products. Branches help to keep this divergence organized.


How do the diagrams help you visualize the branch structure?
That seems rhetorical, but basically the diagrams help to show how each branch is related through it's parents branches. Eventually, there is a common ancestor.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When two branches are merged, there are now two parent branches. This new branch contains all the commits from the two parents. Hence, in the diagram, there are arrows pointing from the new merged branch to each of it's parents.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: When there aren't any conflicts, it's extremely fast and error free. But even when there are conflicts, git indicates where they are so you can resolve them which is also great.
Cons: Sometimes the conflict seems obviously un-conflict-like.

