How did viewing a diff between two versions of a file help you see the bug that was introduced?
Using the windows command "diff" was helpful because it compared to the two files line by line, and only showed the lines that were different. It excluding all the information that was the same, thereby simplifying the whole exercise. 


How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Knowing that all your work is saved might allow you to be try more ideas rapidly without fear of overwriting what turns out to be a better prior version. It also allows for group collaboration.


What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros: If used consistently, then each version will be a reasonable change from the previous version. The version will all be meaningful.
Cons: You might forget to commit.


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Because Git is aimed at programmers who might be handling a large code base whereas Google Docs is for the average user who is likely editing just a single file.


How can you use the commands git log and git diff to view the history of files?
The command 'git log' will show the commit history with ids. Using git diff followed by two ids will compare them to show the differences between the files.


How might using version control make you more confident to make changes that could break something?
Using the command 'git checkout' to return to a previous version of the files is easy, so you can be more bold in your programming.